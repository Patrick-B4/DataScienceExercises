# -*- coding: utf-8 -*-
"""Python Tutorial (Patrick B).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPsa-MRbkrJQrSIAsUChJPgJriKwP1yf

1.0 Python variables differ from other languages, they can have any data type assigned to them and change at any time.
"""

#Method 1 - In this instance x is simply set to an integer and printed (semicolons are not required)
print("Method 1")
x = 5
print(x)
#Method 2 - The same variable can be set to any type
print("Method 2")
var = 12.5
print(var)
var = "Hello World!"
print(var)

"""1.1 Casting in Python is also simple"""

#Method 1 - It is possible to explicitly define what type a variable should be
#or simply just set the variable to the desired type implicitly
x = float(3.5)
print(x)
print("^^ Type of previously output variable " + str(type(x)))
y = 4.5
print(y)
print("^^ Type of previously output variable " + str(type(y)))
#Method 2 it is also possible to change the type by defining a new variable and an old one
var = 15.5
print(var)
print("^^ Type of previously output variable " + str(type(var)))
var = "The value of var was " + str(var) + " now var should be automatically converted to a string."
print(var)
print("^^ Type of previously output variable " + str(type(var)))

"""1.2 Python has a unique feature that allows for formating strings after they have been already typed."""

#Method 1 - There can be blanks left where a certain trait can be inserted
price = 39.99
out = "The video game released for the price of ${}"
print(out.format(price))
#Method 2 - This can be assigned a specific index value to ensure that the proper
#variables are put in the right place
price = 39.99
name = "Grab That Auto V"
year = 2013
out = "{0} was released in {2} for the price of {1}"
print(out.format(name,price,year))

"""1.3 Python lists are very dynamic, they can be easily created and modified"""

#Method 1 - A specific item in a list can be changed
mylist = ["pen", "clipboard", "paper"]
print(mylist)
mylist[0] = "pencil";
print(mylist)

#Method 2 - Multiple items within a list can be changed at the same time
mylist = ["pen", "clipboard", "paper"]
mylist[0:1] = "pencil", "marker", "paintbrush", "fountain pen"
print(mylist)

"""1.4 Python uses If statements in a different way since there is no need for braces, brackets, or semi-colons"""

#Method 1 - Conditions can be set for the next lines of code to execute
print("Method 1")
a = 30
b = 40
if a < b:
  print("A is less than B")
  print("B is greater than A")
else:
  print("A is greater than or equal to B")

#Method 2 - These statements can also be typed more naturally in one line
print("Method 2")

a = 50

print("A is less than B \nB is greater than A") if a < b else print("A is greater than or equal to B")

"""1.5 Python has two main ways in which it is possible to create a loop"""

#Method 1 - It is common to use a while loop
print("Method 1")
i = 0
while i <= 10:
  print(str(i)+" is even") if((i % 2) == 0) else print(str(i) + " is odd")
  i+=1
#Method 2 - Another loop that is used is the for loop
print("Method 2")

for x in range (10, 21):
  print(x)

"""1.6 Functions are also useful in Python"""

#Method 1 - A function can simply do something that may be repeatedly needed in the future
def helloFunction():
  print("Hello this is code being called from a function!")

helloFunction()

#Method 2 - A function can be called with an argument passed in
def doubleNumber(number):
  print("Function called which doubles a provided number, the original number is:")
  print(number)
  print("The number after it has been doubled:")
  number = number * 2
  print(number)

doubleNumber(10)

"""1.7 Lambda Expressions in Python can be used to make powerful, yet simple code"""

#Method 1 - Using a lambda within code to provide utility
addTen = lambda x : x + 10
print(addTen(11))

#Method 2 - Lambdas can be used within a function to provide a template for code
def myFunction(n):
  return lambda x : x * n
#This provides the template for code that can be multiplied by a certain amount
#This will double any number
double = myFunction(2)
print(double(20))
#The same function can quadruple the number
quad = myFunction(4)
print(quad(20))

"""1.8 Python also allows for the creation of Classes"""

#Method 1 - Creating a class with predefinied attributes
class GenericPerson:
  name = "Frank"
  age = 20
person1 = GenericPerson
print(person1.name)
print(person1.age)

#Method 2 - Creating a class with custom fields
class Person:
  def __init__(self, name, age, job):
    self.name = name
    self.age = age
    self.job = job
  #Creating a function to represent the information in the class is useful
  def __str__(self):
    return f"{self.name}({self.age}) works as a {self.job}"

person2 = Person("Jacob", 35, "janitor")
print(person2)

"""1.9 Python math functions"""

#Method 1 - Python contains built in math functions such as min, max, abs, and pow
print("Method 1")
x = min(10, 20 ,30)
y = max(10, 20 , 30)
print("Min of 10,20,30 added to max of 10,20,30")
print(x + y)
print("Absolute value of -21321")
print(abs(-21321))
print("2 to the power of 2")
print(pow(2,2))
#Method 2 - There is more functionality by importing the math module
print("Method 2")
import math
#This allows for square root, ceiling/floor, and pi to be used
print("Squrare root of 64:")
print(math.sqrt(64))
print("Floor and ceiling of 1.5")
print(math.floor(1.5))
print(math.ceil(1.5))
print("Value of math.pi:")
print(math.pi)